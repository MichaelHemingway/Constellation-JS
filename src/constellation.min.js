/*!Victor Ivanov - Constellation */
/*jslint plusplus: true */
(function () {

	//Helper functions

	//Fit the canvas to its container
	function fitToContainer(canvas) {
		canvas.style.width = '100%';
		canvas.style.height = '100%';
		canvas.width = canvas.offsetWidth;
		canvas.height = canvas.offsetHeight;
	}

	//Random float generator
	function getRandomArbitrary(min, max) {
		return Math.random() * (max - min) + min;
	}

	//Dot distance calculator
	function distanceVerifier(dot1X, dot1Y, dot2X, dot2Y) {
		if ((Math.max(dot1X, dot2X) - Math.min(dot1X, dot2X) < linedistance) && (Math.max(dot1Y, dot2Y) - Math.min(dot1Y, dot2Y) < linedistance)) {
			return true;
		} else {
			return false;
		}
	}
	//Dot class constructor
	var dot = function () {
		this.dotY = getRandomArbitrary(10, canvas.height);
		this.dotX = getRandomArbitrary(10, canvas.width);
		this.dotVY = getRandomArbitrary(-0.1, 0.1);
		this.dotVX = getRandomArbitrary(-0.1, 0.1);
		this.dotR = getRandomArbitrary(1, 2.4);
	};

	//Method for calculating new dot position and drawing
	dot.prototype.drawDot = function () {
		this.dotX += this.dotVX;
		this.dotY += this.dotVY;

		if (this.dotX + this.dotVX > canvas.width || this.dotX + this.dotVX < 0) {
			this.dotVX = -this.dotVX;
		}

		if (this.dotY + this.dotVY > canvas.height || this.dotY + this.dotVY < 0) {
			this.dotVY = -this.dotVY;
		}

		ctx.beginPath();
		ctx.arc(this.dotX, this.dotY, this.dotR, 0, Math.PI * 2, true);
		ctx.closePath();
		ctx.fillStyle = "rgba(220,220,220,1)";
		ctx.fill();
	};
	//Line class constructor
	var line = function (lineX, lineY, lineX2, lineY2) {
		this.lineX = lineX;
		this.lineY = lineY;
		this.lineX2 = lineX2;
		this.lineY2 = lineY2;
	};

	//Method for drawing line between two points
	line.prototype.drawLine = function () {
		ctx.beginPath();
		ctx.moveTo(this.lineX, this.lineY);
		ctx.lineTo(this.lineX2, this.lineY2);
		ctx.lineWidth = 0.7;
		ctx.strokeStyle = "rgba(220, 220, 220, 0.5)";
		ctx.stroke();
	};
	//Getting canvas elements
	var canvas = document.getElementById('intro-canvas');
	var ctx = canvas.getContext('2d');

	//Fit canvas to container before generating objects that depend on canvas sizing
	fitToContainer(canvas);

	//Line drawing thersholds
	var linedistance = canvas.width / 20;

	//Array of dot objects
	var dotnum = 300;
	var points = new Array(dotnum);

	for (i = 0; i < dotnum; i++) {
		points[i] = new dot();
	}

	//Primary draw function
	function draw() {
		//Fit canvas to container
		fitToContainer(canvas);

		//Clear canvas for next frame
		ctx.clearRect(0, 0, canvas.width, canvas.height);

		//Check distances between all points and draw lines
		for (i = 0; i < dotnum; i++) {
			for (j = i + 1; j < (dotnum); j++) {
				if (distanceVerifier(points[i].dotX, points[i].dotY, points[j].dotX, points[j].dotY)) {
					var straight = new line(points[i].dotX, points[i].dotY, points[j].dotX, points[j].dotY);
					straight.drawLine();
				}
			}
		}

		//Draw dots
		for (i = 0; i < dotnum; i++) {
			points[i].drawDot();
		}

		//Call frame
		window.requestAnimationFrame(draw);
	}

	//Call frame when loaded
	window.addEventListener("load", draw());
}());